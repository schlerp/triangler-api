/* tslint:disable */
/* eslint-disable */
/**
 * Triangler
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ObservationResponseIn
 */
export interface ObservationResponseIn {
    /**
     *
     * @type {string}
     * @memberof ObservationResponseIn
     */
    chosenSample: string;
    /**
     *
     * @type {Date}
     * @memberof ObservationResponseIn
     */
    responseDate: Date;
    /**
     *
     * @type {number}
     * @memberof ObservationResponseIn
     */
    experimentId: number;
    /**
     *
     * @type {number}
     * @memberof ObservationResponseIn
     */
    observationId: number;
    /**
     *
     * @type {string}
     * @memberof ObservationResponseIn
     */
    experienceLevel: string;
    /**
     *
     * @type {string}
     * @memberof ObservationResponseIn
     */
    token: string;
}

/**
 * Check if a given object implements the ObservationResponseIn interface.
 */
export function instanceOfObservationResponseIn(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chosenSample" in value;
    isInstance = isInstance && "responseDate" in value;
    isInstance = isInstance && "experimentId" in value;
    isInstance = isInstance && "observationId" in value;
    isInstance = isInstance && "experienceLevel" in value;
    isInstance = isInstance && "token" in value;

    return isInstance;
}

export function ObservationResponseInFromJSON(json: any): ObservationResponseIn {
    return ObservationResponseInFromJSONTyped(json, false);
}

export function ObservationResponseInFromJSONTyped(json: any, ignoreDiscriminator: boolean): ObservationResponseIn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'chosenSample': json['chosen_sample'],
        'responseDate': (new Date(json['response_date'])),
        'experimentId': json['experiment_id'],
        'observationId': json['observation_id'],
        'experienceLevel': json['experience_level'],
        'token': json['token'],
    };
}

export function ObservationResponseInToJSON(value?: ObservationResponseIn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'chosen_sample': value.chosenSample,
        'response_date': (value.responseDate.toISOString()),
        'experiment_id': value.experimentId,
        'observation_id': value.observationId,
        'experience_level': value.experienceLevel,
        'token': value.token,
    };
}
