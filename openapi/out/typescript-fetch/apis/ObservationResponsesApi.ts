/* tslint:disable */
/* eslint-disable */
/**
 * Triangler
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JustId,
  ObservationResponseIn,
  ObservationResponseOut,
  Success,
} from '../models/index';
import {
    JustIdFromJSON,
    JustIdToJSON,
    ObservationResponseInFromJSON,
    ObservationResponseInToJSON,
    ObservationResponseOutFromJSON,
    ObservationResponseOutToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface ExperimentsApiCreateObservationResponseRequest {
    experimentId: number;
    observationResponseIn: ObservationResponseIn;
}

export interface ExperimentsApiDeleteObservationResponseRequest {
    experimentId: number;
    observationId: number;
}

export interface ExperimentsApiGetAllObservationResponsesRequest {
    experimentId: number;
}

export interface ExperimentsApiGetObservationResponseByIdRequest {
    experimentId: number;
    observationId: number;
}

export interface ExperimentsApiUpdateObservationResponseRequest {
    experimentId: number;
    observationId: number;
    observationResponseIn: ObservationResponseIn;
}

/**
 *
 */
export class ObservationResponsesApi extends runtime.BaseAPI {

    /**
     * Creates a new observation with the supplied payload, returns the observation id.
     * Create Observation Response
     */
    async experimentsApiCreateObservationResponseRaw(requestParameters: ExperimentsApiCreateObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JustId>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiCreateObservationResponse.');
        }

        if (requestParameters.observationResponseIn === null || requestParameters.observationResponseIn === undefined) {
            throw new runtime.RequiredError('observationResponseIn','Required parameter requestParameters.observationResponseIn was null or undefined when calling experimentsApiCreateObservationResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/responses`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObservationResponseInToJSON(requestParameters.observationResponseIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JustIdFromJSON(jsonValue));
    }

    /**
     * Creates a new observation with the supplied payload, returns the observation id.
     * Create Observation Response
     */
    async experimentsApiCreateObservationResponse(requestParameters: ExperimentsApiCreateObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JustId> {
        const response = await this.experimentsApiCreateObservationResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the observation on provided experiment with a matching id.
     * Delete Observation Response
     */
    async experimentsApiDeleteObservationResponseRaw(requestParameters: ExperimentsApiDeleteObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiDeleteObservationResponse.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiDeleteObservationResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/responses/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Deletes the observation on provided experiment with a matching id.
     * Delete Observation Response
     */
    async experimentsApiDeleteObservationResponse(requestParameters: ExperimentsApiDeleteObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.experimentsApiDeleteObservationResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all observations defined for provided experiment id.
     * Get All Observation Responses
     */
    async experimentsApiGetAllObservationResponsesRaw(requestParameters: ExperimentsApiGetAllObservationResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ObservationResponseOut>>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiGetAllObservationResponses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/responses`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObservationResponseOutFromJSON));
    }

    /**
     * Gets all observations defined for provided experiment id.
     * Get All Observation Responses
     */
    async experimentsApiGetAllObservationResponses(requestParameters: ExperimentsApiGetAllObservationResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ObservationResponseOut>> {
        const response = await this.experimentsApiGetAllObservationResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific observation by its experiment id and observation id.
     * Get Observation Response By Id
     */
    async experimentsApiGetObservationResponseByIdRaw(requestParameters: ExperimentsApiGetObservationResponseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservationResponseOut>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiGetObservationResponseById.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiGetObservationResponseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/responses/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObservationResponseOutFromJSON(jsonValue));
    }

    /**
     * Get a specific observation by its experiment id and observation id.
     * Get Observation Response By Id
     */
    async experimentsApiGetObservationResponseById(requestParameters: ExperimentsApiGetObservationResponseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservationResponseOut> {
        const response = await this.experimentsApiGetObservationResponseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the observation on experiment, using supplied payload
     * Update Observation Response
     */
    async experimentsApiUpdateObservationResponseRaw(requestParameters: ExperimentsApiUpdateObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiUpdateObservationResponse.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiUpdateObservationResponse.');
        }

        if (requestParameters.observationResponseIn === null || requestParameters.observationResponseIn === undefined) {
            throw new runtime.RequiredError('observationResponseIn','Required parameter requestParameters.observationResponseIn was null or undefined when calling experimentsApiUpdateObservationResponse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/responses/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObservationResponseInToJSON(requestParameters.observationResponseIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Updates the observation on experiment, using supplied payload
     * Update Observation Response
     */
    async experimentsApiUpdateObservationResponse(requestParameters: ExperimentsApiUpdateObservationResponseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.experimentsApiUpdateObservationResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
