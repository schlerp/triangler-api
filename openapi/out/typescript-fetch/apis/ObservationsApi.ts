/* tslint:disable */
/* eslint-disable */
/**
 * Triangler
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ObservationIn,
  ObservationOut,
  Success,
} from '../models/index';
import {
    ObservationInFromJSON,
    ObservationInToJSON,
    ObservationOutFromJSON,
    ObservationOutToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface ExperimentsApiCreateObservationRequest {
    experimentId: number;
    observationIn: ObservationIn;
}

export interface ExperimentsApiDeleteObservationRequest {
    experimentId: number;
    observationId: number;
}

export interface ExperimentsApiGetAllObservationsRequest {
    experimentId: number;
}

export interface ExperimentsApiGetObservationByIdRequest {
    experimentId: number;
    observationId: number;
}

export interface ExperimentsApiUpdateObservationRequest {
    experimentId: number;
    observationId: number;
    observationIn: ObservationIn;
}

/**
 *
 */
export class ObservationsApi extends runtime.BaseAPI {

    /**
     * Creates a new observation with the supplied payload, returns the observation id.
     * Create Observation
     */
    async experimentsApiCreateObservationRaw(requestParameters: ExperimentsApiCreateObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservationOut>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiCreateObservation.');
        }

        if (requestParameters.observationIn === null || requestParameters.observationIn === undefined) {
            throw new runtime.RequiredError('observationIn','Required parameter requestParameters.observationIn was null or undefined when calling experimentsApiCreateObservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/observation`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObservationInToJSON(requestParameters.observationIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObservationOutFromJSON(jsonValue));
    }

    /**
     * Creates a new observation with the supplied payload, returns the observation id.
     * Create Observation
     */
    async experimentsApiCreateObservation(requestParameters: ExperimentsApiCreateObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservationOut> {
        const response = await this.experimentsApiCreateObservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the observation on provided experiment with a matching id.
     * Delete Observation
     */
    async experimentsApiDeleteObservationRaw(requestParameters: ExperimentsApiDeleteObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiDeleteObservation.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiDeleteObservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/observation/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Deletes the observation on provided experiment with a matching id.
     * Delete Observation
     */
    async experimentsApiDeleteObservation(requestParameters: ExperimentsApiDeleteObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.experimentsApiDeleteObservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all observations defined for provided experiment id.
     * Get All Observations
     */
    async experimentsApiGetAllObservationsRaw(requestParameters: ExperimentsApiGetAllObservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ObservationOut>>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiGetAllObservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/observations`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObservationOutFromJSON));
    }

    /**
     * Gets all observations defined for provided experiment id.
     * Get All Observations
     */
    async experimentsApiGetAllObservations(requestParameters: ExperimentsApiGetAllObservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ObservationOut>> {
        const response = await this.experimentsApiGetAllObservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific observation by its experiment id and observation id.
     * Get Observation By Id
     */
    async experimentsApiGetObservationByIdRaw(requestParameters: ExperimentsApiGetObservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservationOut>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiGetObservationById.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiGetObservationById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/observations/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObservationOutFromJSON(jsonValue));
    }

    /**
     * Get a specific observation by its experiment id and observation id.
     * Get Observation By Id
     */
    async experimentsApiGetObservationById(requestParameters: ExperimentsApiGetObservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservationOut> {
        const response = await this.experimentsApiGetObservationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the observation on experiment, using supplied payload
     * Update Observation
     */
    async experimentsApiUpdateObservationRaw(requestParameters: ExperimentsApiUpdateObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.experimentId === null || requestParameters.experimentId === undefined) {
            throw new runtime.RequiredError('experimentId','Required parameter requestParameters.experimentId was null or undefined when calling experimentsApiUpdateObservation.');
        }

        if (requestParameters.observationId === null || requestParameters.observationId === undefined) {
            throw new runtime.RequiredError('observationId','Required parameter requestParameters.observationId was null or undefined when calling experimentsApiUpdateObservation.');
        }

        if (requestParameters.observationIn === null || requestParameters.observationIn === undefined) {
            throw new runtime.RequiredError('observationIn','Required parameter requestParameters.observationIn was null or undefined when calling experimentsApiUpdateObservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/experiments/{experiment_id}/observation/{observation_id}`.replace(`{${"experiment_id"}}`, encodeURIComponent(String(requestParameters.experimentId))).replace(`{${"observation_id"}}`, encodeURIComponent(String(requestParameters.observationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObservationInToJSON(requestParameters.observationIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Updates the observation on experiment, using supplied payload
     * Update Observation
     */
    async experimentsApiUpdateObservation(requestParameters: ExperimentsApiUpdateObservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.experimentsApiUpdateObservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
